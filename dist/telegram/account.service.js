"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountService = void 0;
const common_1 = require("@nestjs/common");
const telegraf_1 = require("telegraf");
const nocodb_service_1 = require("../database/nocodb.service");
const tiptop_service_1 = require("./clients/tiptop/tiptop.service");
let AccountService = class AccountService {
    constructor(nocodbService, tiptopService) {
        this.nocodbService = nocodbService;
        this.tiptopService = tiptopService;
    }
    formatDate(dateString) {
        if (!dateString)
            return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        const date = new Date(dateString);
        if (isNaN(date.getTime()))
            return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
        });
    }
    formatRoles(roles) {
        if (!roles)
            return '–ù–µ—Ç —Ä–æ–ª–µ–π';
        if (typeof roles === 'string') {
            return roles || '–ù–µ—Ç —Ä–æ–ª–µ–π';
        }
        if (Array.isArray(roles)) {
            return roles.length > 0 ? roles.join(', ') : '–ù–µ—Ç —Ä–æ–ª–µ–π';
        }
        return '–ù–µ—Ç —Ä–æ–ª–µ–π';
    }
    formatSubscriptions(subscriptions) {
        if (!subscriptions || subscriptions.length === 0)
            return '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫';
        return subscriptions.join('\n');
    }
    async getAccountInfo(telegramId) {
        const user = await this.nocodbService.findUser(telegramId);
        if (!user)
            return null;
        return `üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üÜî –°–∏—Å—Ç–µ–º–Ω—ã–π: ${user.user_id}
üÜî Telegram: ${user.telegram_id}
üë§ –ò–º—è: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë§ –§–∞–º–∏–ª–∏—è: ${user.last_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìÆ Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üîë –†–æ–ª–∏: ${this.formatRoles(user.roles)}
üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${this.formatDate(user.CreatedAt)}

üóÇÔ∏è –ü–æ–¥–ø–∏—Å–∫–∏:
${this.formatSubscriptions(user.subscriptions)}`;
    }
    async getAccountKeyboard(telegramId) {
        const buttons = [
            [telegraf_1.Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'edit_account')],
        ];
        const hasTipTopAccess = await this.tiptopService.isTipTopUser(telegramId);
        if (hasTipTopAccess) {
            buttons.push([telegraf_1.Markup.button.callback('üöò TipTop', 'tiptop')]);
        }
        buttons.push([telegraf_1.Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_main')]);
        return telegraf_1.Markup.inlineKeyboard(buttons);
    }
    getEditKeyboard() {
        return telegraf_1.Markup.inlineKeyboard([
            [telegraf_1.Markup.button.callback('üìÆ Email', 'edit_email')],
            [telegraf_1.Markup.button.callback('üìû –¢–µ–ª–µ—Ñ–æ–Ω', 'edit_phone')],
            [telegraf_1.Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')],
        ]);
    }
    async updateUserData(telegramId, field, value) {
        try {
            if (field === 'email' && !this.isValidEmail(value)) {
                return {
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.',
                };
            }
            if (field === 'phone' && !this.isValidPhone(value)) {
                return {
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXX.',
                };
            }
            await this.nocodbService.updateUser(telegramId, { [field]: value });
            return {
                success: true,
                message: `${field === 'email' ? 'Email' : '–¢–µ–ª–µ—Ñ–æ–Ω'} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`,
            };
        }
        catch (error) {
            console.error('Error updating user data:', error);
            return {
                success: false,
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            };
        }
    }
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
    isValidPhone(phone) {
        const phoneRegex = /^\+7\d{10}$/;
        return phoneRegex.test(phone);
    }
};
exports.AccountService = AccountService;
exports.AccountService = AccountService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [nocodb_service_1.NocoDBService,
        tiptop_service_1.TipTopService])
], AccountService);
//# sourceMappingURL=account.service.js.map
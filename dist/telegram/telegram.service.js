"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramService = void 0;
const common_1 = require("@nestjs/common");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const telegraf_1 = require("telegraf");
const appwrite_service_1 = require("../appwrite/appwrite.service");
let TelegramService = class TelegramService {
    constructor(bot, appwriteService) {
        this.bot = bot;
        this.appwriteService = appwriteService;
        this.userStates = new Map();
        this.orderQuestions = [
            '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:',
            '–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:',
            '–ö–∞–∫–æ–π —É –≤–∞—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç?',
            '–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?',
            '–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ –º–∏–º–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞? (email/—Ç–µ–ª–µ—Ñ–æ–Ω/–≤–∫/–¥–∏—Å–∫–æ—Ä–¥)',
        ];
        this.setupCommands();
    }
    async setupCommands() {
        try {
            await this.bot.telegram.setMyCommands([{ command: 'menu', description: '–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }], { scope: { type: 'all_private_chats' } });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:', error);
        }
    }
    async sendMainMenu(ctx, deleteMessage = false) {
        const inlineKeyboard = {
            inline_keyboard: [
                [],
                [
                    {
                        text: 'üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
                        switch_inline_query_current_chat: 'portfolio',
                    },
                    { text: 'üí∞ –î–æ–Ω–∞—Ç', url: process.env.MONEY_DONATE_LINK },
                ],
                [{ text: 'üí¨ –°–≤—è–∑—å', callback_data: 'contact' }],
            ],
        };
        const message = `üëãüèª –ü—Ä–∏–≤–µ—Ç, ${ctx.message?.from.first_name || ctx.callbackQuery?.from.first_name}!

–í —ç—Ç–æ–º –±–æ—Ç–µ —Å–æ–±—Ä–∞–Ω–æ –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏ –æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–¥–µ—é, –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.
 
–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üöÄ

üìÉ [Privacy policy](${process.env.PRIVACY_POLICY_LINK})`;
        if (deleteMessage && ctx.callbackQuery?.message) {
            try {
                await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
                await ctx.reply(message, {
                    parse_mode: 'Markdown',
                    reply_markup: inlineKeyboard,
                    disable_web_page_preview: true,
                });
            }
            catch (error) {
                console.error('Error deleting message:', error);
                await ctx.editMessageText(message, {
                    parse_mode: 'Markdown',
                    reply_markup: inlineKeyboard,
                    disable_web_page_preview: true,
                });
            }
        }
        else if ('message' in ctx) {
            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: inlineKeyboard,
                disable_web_page_preview: true,
            });
        }
        else if ('callback_query' in ctx) {
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: inlineKeyboard,
                disable_web_page_preview: true,
            });
        }
    }
    async sendAccountMenu(ctx, userData) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit_account' },
                    { text: '–°–µ—Å—Å–∏–∏', callback_data: 'sessions' },
                ],
                [{ text: '–í—ã–π—Ç–∏', callback_data: 'logout' }],
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'main_menu' }],
            ],
        };
        const message = `
ID: ${userData.id}
–ò–º—è: ${userData.name}
–ü–æ–¥–ø–∏—Å–∫–∏: ${userData.subscriptions || '–ù–µ—Ç'}
    `;
        if ('callback_query' in ctx) {
            await ctx.editMessageText(message, { reply_markup: keyboard });
        }
    }
    async sendContactMenu(ctx) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üíº –ó–∞–∫–∞–∑–∞—Ç—å', callback_data: 'order' },
                    { text: 'ü´Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' },
                ],
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'main_menu' }],
            ],
        };
        if (ctx.callbackQuery) {
            await ctx.editMessageText('üí¨ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –ø–∏—à–∏ –Ω–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! –ê –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!', {
                reply_markup: keyboard,
            });
        }
        else {
            await ctx.reply('üí¨ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –ø–∏—à–∏ –Ω–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! –ê –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!', { reply_markup: keyboard });
        }
    }
    async sendEditAccountMenu(ctx, userData) {
        const keyboard = {
            inline_keyboard: [
                [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: 'edit_name' }],
                [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É', callback_data: 'edit_email' }],
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'account' }],
            ],
        };
        if ('callback_query' in ctx) {
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', {
                reply_markup: keyboard,
            });
        }
    }
    async sendPortfolioItem(ctx, itemId) {
        const item = await this.appwriteService.getPortfolioItem(itemId);
        if (!item)
            return;
        const formatDate = (dateString) => {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
            });
        };
        const startDate = formatDate(item.date_start);
        const endDate = item.date_end
            ? formatDate(item.date_end)
            : '–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è';
        await ctx.telegram.sendPhoto(ctx.message.chat.id, item.pic ? this.appwriteService.getImageUrl(item.pic) : null, {
            caption: `
${item.name}

üìù ${item.text}

üìÖ –í–µ–¥–µ–Ω–∏–µ: ${startDate} - ${endDate}

üß∞ –°—Ç–µ–∫: ${item.tags}
`,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', url: item.link }],
                    [
                        {
                            text: 'üíª –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
                            switch_inline_query_current_chat: 'portfolio',
                        },
                    ],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
                ],
            },
        });
        try {
            await ctx.deleteMessage();
        }
        catch (error) {
            console.error('Error deleting message:', error);
        }
    }
    async deleteMessage(chatId, messageId) {
        try {
            await this.bot.telegram.deleteMessage(chatId, messageId);
        }
        catch (error) {
            console.error('Error deleting message:', error);
        }
    }
    async startOrder(ctx) {
        const userId = ctx.callbackQuery.from.id;
        this.userStates.set(userId, {
            state: 'order',
            data: {
                answers: [],
                currentQuestion: 0,
                username: ctx.callbackQuery.from.username,
                firstName: ctx.callbackQuery.from.first_name,
                lastName: ctx.callbackQuery.from.last_name,
            },
        });
        await ctx.editMessageText(this.orderQuestions[0], {
            reply_markup: {
                inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'contact' }]],
            },
        });
    }
    async handleOrderMessage(ctx) {
        const userId = ctx.message.from.id;
        const userState = this.userStates.get(userId);
        if (!userState || userState.state !== 'order')
            return false;
        userState.data.answers.push(ctx.message.text);
        if (userState.data.currentQuestion < this.orderQuestions.length - 1) {
            userState.data.currentQuestion++;
            await ctx.reply(this.orderQuestions[userState.data.currentQuestion], {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'contact' }],
                    ],
                },
            });
        }
        else {
            const adminMessage = `
üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

üë§ ${userState.data.firstName || ''} ${userState.data.lastName || ''} ${userState.data.username ? '@' + userState.data.username : ''}

‚ùì –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:
${userState.data.answers[0]}

üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
${userState.data.answers[1]}

üí∞ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç:
${userState.data.answers[2]}

‚è∞ –°—Ä–æ–∫–∏:
${userState.data.answers[3]}

üìû –ö–æ–Ω—Ç–∞–∫—Ç:
${userState.data.answers[4]}
`;
            await this.bot.telegram.sendMessage(process.env.TELEGRAM_ADMIN_PEER_ID, adminMessage);
            await ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
                    ],
                },
            });
            this.userStates.delete(userId);
        }
        return true;
    }
    async startSupport(ctx) {
        const userId = ctx.callbackQuery.from.id;
        this.userStates.set(userId, {
            state: 'support',
            data: {
                username: ctx.callbackQuery.from.username,
                firstName: ctx.callbackQuery.from.first_name,
                lastName: ctx.callbackQuery.from.last_name,
            },
        });
        await ctx.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∞ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!', {
            reply_markup: {
                inline_keyboard: [[{ text: 'üö™ –í—ã–π—Ç–∏', callback_data: 'contact' }]],
            },
        });
    }
    async handleSupportMessage(ctx) {
        const userId = ctx.message.from.id;
        const userState = this.userStates.get(userId);
        if (!userState || userState.state !== 'support')
            return false;
        const supportChatId = process.env.TELEGRAM_SUPPORT_PEER_ID;
        if (!supportChatId) {
            console.error('TELEGRAM_SUPPORT_PEER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
                    ],
                },
            });
            return true;
        }
        try {
            await this.bot.telegram.sendMessage(supportChatId, `üë§ –û—Ç: ${userState.data.firstName || ''} ${userState.data.lastName || ''} ${userState.data.username ? '@' + userState.data.username : ''}
ID: ${userId}

${ctx.message.text}

–°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
                                callback_data: `close_ticket:${userId}`,
                            },
                        ],
                    ],
                },
            });
            await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.');
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
            console.error('ID —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', supportChatId);
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
                    ],
                },
            });
        }
        return true;
    }
    async sendSupportReply(userId, message, replyToMessageId, originalMessageText) {
        try {
            await this.bot.telegram.sendMessage(userId, `üìÆ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n${message}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: 'reply_support' },
                            {
                                text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
                                callback_data: 'close_ticket_user',
                            },
                        ],
                    ],
                },
            });
            const supportChatId = process.env.TELEGRAM_SUPPORT_PEER_ID;
            await this.bot.telegram.editMessageText(supportChatId, replyToMessageId, undefined, `${originalMessageText.replace(/\n–°—Ç–∞—Ç—É—Å: .*$/, '')}\n\n–°—Ç–∞—Ç—É—Å: ‚úÖ –û—Ç–≤–µ—Ç–∏–ª–∏`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
                                callback_data: `close_ticket:${userId}`,
                            },
                        ],
                    ],
                },
            });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
            const supportChatId = process.env.TELEGRAM_SUPPORT_PEER_ID;
            await this.bot.telegram.editMessageText(supportChatId, replyToMessageId, undefined, `${originalMessageText.replace(/\n–°—Ç–∞—Ç—É—Å: .*$/, '')}\n\n–°—Ç–∞—Ç—É—Å: ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏\n${error.message}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
                                callback_data: `close_ticket:${userId}`,
                            },
                        ],
                    ],
                },
            });
        }
    }
    async sendMessage(chatId, text) {
        return this.bot.telegram.sendMessage(chatId, text);
    }
    async handleTicketClose(messageId, userId, messageText) {
        try {
            const supportChatId = process.env.TELEGRAM_SUPPORT_PEER_ID;
            await this.bot.telegram.editMessageText(supportChatId, messageId, undefined, `${messageText.replace(/\n–°—Ç–∞—Ç—É—Å: .*$/, '')}\n\n–°—Ç–∞—Ç—É—Å: üîí –ó–∞–∫—Ä—ã—Ç`, {
                reply_markup: {
                    inline_keyboard: [],
                },
            });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞:', error);
        }
    }
    setUserState(userId, state, data) {
        this.userStates.set(userId, { state, data });
    }
    getUserState(userId) {
        return this.userStates.get(userId);
    }
    clearUserState(userId) {
        this.userStates.delete(userId);
    }
};
exports.TelegramService = TelegramService;
exports.TelegramService = TelegramService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, nestjs_telegraf_1.InjectBot)()),
    __metadata("design:paramtypes", [telegraf_1.Telegraf,
        appwrite_service_1.AppwriteService])
], TelegramService);
//# sourceMappingURL=telegram.service.js.map
import { Injectable } from '@nestjs/common';
import { Start, Update, Ctx, On, Action, Command } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { Update as TelegrafUpdate } from 'telegraf/types';
import { TelegramService } from './telegram.service';
import { UserService } from '../user/user.service';
import { AppwriteService } from '../appwrite/appwrite.service';

type TelegrafContext = Context<TelegrafUpdate>;

@Update()
@Injectable()
export class TelegramUpdate {
  constructor(
    private readonly telegramService: TelegramService,
    private readonly userService: UserService,
    private readonly appwriteService: AppwriteService,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: TelegrafContext) {
    await this.telegramService.sendMainMenu(ctx);
  }

  @Command('menu')
  async onMenuCommand(@Ctx() ctx: TelegrafContext) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
    if (ctx.chat?.type !== 'private') {
      return;
    }
    await this.telegramService.sendMainMenu(ctx);
  }

  @Action('account')
  async onAccount(@Ctx() ctx: any) {
    const userData = await this.appwriteService.getUserData(ctx);
    if (userData) {
      await this.telegramService.sendAccountMenu(ctx, userData);
    } else {
      await ctx.editMessageText('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:', {
        reply_markup: {
          inline_keyboard: [[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]],
        },
      });
    }
  }

  @Action('contact')
  async onContact(@Ctx() ctx: any) {
    await this.telegramService.sendContactMenu(ctx);
  }

  @Action('edit_account')
  async onEditAccount(@Ctx() ctx: any) {
    const userData = await this.appwriteService.getUserData(ctx);
    if (userData) {
      await this.telegramService.sendEditAccountMenu(ctx, userData);
    }
  }

  @Action('sessions')
  async onSessions(@Ctx() ctx: TelegrafContext) {
    if (!ctx.callbackQuery) return;
    await ctx.editMessageText('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', {
      reply_markup: {
        inline_keyboard: [[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'account' }]],
      },
    });
  }

  @Action('order')
  async onOrder(@Ctx() ctx: TelegrafContext) {
    await this.telegramService.startOrder(ctx);
  }

  @Action('support')
  async onSupport(@Ctx() ctx: TelegrafContext) {
    await this.telegramService.startSupport(ctx);
  }

  // @Action(/^(accept|vote|reject)_proposal:(\d+)$/)
  // async onProposalAction(@Ctx() ctx: any) {
  //   if (!ctx.callbackQuery?.data) return;

  //   const [action, userId] = ctx.callbackQuery.data.split(':');
  //   const adminId = process.env.TELEGRAM_ADMIN_PEER_ID;

  //   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  //   if (ctx.callbackQuery.from.id.toString() !== adminId) return;

  //   let message = '';
  //   switch (action) {
  //     case 'accept_proposal':
  //       message = '‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!';
  //       // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  //       try {
  //         await ctx.pinChatMessage(ctx.callbackQuery.message.message_id);
  //       } catch (error) {
  //         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  //       }
  //       break;

  //     case 'vote_proposal':
  //       message = 'üó≥ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.';
  //       // –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
  //       try {
  //         const proposalText = ctx.callbackQuery.message.text;

  //         const match = proposalText.match(
  //           /üë§ (.*?)(?:\n\n|$).*?üìù –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:\n(.*)/s,
  //         );
  //         if (match) {
  //           const [, author, text] = match;
  //           const pollMessage = text;

  //           const channelId = process.env.TELEGRAM_CHANNEL_PEER_ID;
  //           if (!channelId) {
  //             throw new Error(
  //               'TELEGRAM_CHANNEL_PEER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ',
  //             );
  //           }
  //           await this.telegramService.createPoll(channelId, pollMessage);
  //         } else {
  //           console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è');
  //           throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
  //         }
  //       } catch (error) {
  //         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
  //         message = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  //       }
  //       break;

  //     case 'reject_proposal':
  //       message = '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.';
  //       // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  //       try {
  //         await ctx.deleteMessage();
  //         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  //         await this.telegramService.sendMessage(parseInt(userId), message);
  //         return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
  //       } catch (error) {
  //         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  //       }
  //       break;
  //   }

  //   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  //   await this.telegramService.sendMessage(parseInt(userId), message);

  //   // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è —Å reject, –≥–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è)
  //   if (action !== 'reject_proposal') {
  //     await ctx.editMessageText(
  //       ctx.callbackQuery.message.text + `\n\n–°—Ç–∞—Ç—É—Å: ${message}`,
  //     );
  //   }
  // }

  @Action('main_menu')
  async onMainMenu(@Ctx() ctx: any) {
    await this.telegramService.sendMainMenu(ctx, true);
  }

  @On('inline_query')
  async onInlineQuery(@Ctx() ctx: any) {
    if (!ctx.inlineQuery) return;

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (!ctx.inlineQuery.query) {
      const commands = [
        {
          type: 'article',
          id: 'inline_commands',
          title: '‚åò –ö–æ–º–∞–Ω–¥—ã',
          description: `üíª –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ - –≤–≤–µ–¥–∏—Ç–µ "portfolio"`,
          input_message_content: {
            message_text: `
‚åò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

üíª –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ - –≤–≤–µ–¥–∏—Ç–µ "portfolio"
            `,
          },
        },
      ];
      await ctx.answerInlineQuery(commands, { cache_time: 0 });
      return;
    }

    if (ctx.inlineQuery.query === 'portfolio') {
      const items = await this.appwriteService.getPortfolioItems();

      items.sort(
        (a, b) =>
          new Date(b.date_start).getTime() - new Date(a.date_start).getTime(),
      );

      const isPrivateChat = ctx.inlineQuery.chat_type === 'sender';

      const results = await Promise.all(
        items.map(async (item) => {
          const baseResult = {
            id: item.$id,
            type: 'article',
            title: item.name,
            description: `üìù ${item.desc}\n\nüß∞ –°—Ç–µ–∫: ${item.tags}`,
            thumb_url: item.logo
              ? this.appwriteService.getImageUrl(item.logo)
              : null,
          };

          if (isPrivateChat) {
            return {
              ...baseResult,
              input_message_content: {
                message_text: `/abros-portfolio-${item.$id}`,
              },
            };
          } else {
            const photoUrl = this.appwriteService.getImageUrl(item.pic);
            const formatDate = (dateString: string) => {
              const date = new Date(dateString);
              return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
              });
            };

            const startDate = formatDate(item.date_start);
            const endDate = item.date_end
              ? formatDate(item.date_end)
              : '–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è';
            return {
              ...baseResult,
              input_message_content: {
                message_text: `<a href="${photoUrl}">&#8205;</a>${item.name}\n\nüìù ${item.text}\n\nüìÖ –í–µ–¥–µ–Ω–∏–µ: ${startDate} - ${endDate}\n\nüß∞ –°—Ç–µ–∫: ${item.tags}`,
                parse_mode: 'HTML',
              },
              reply_markup: {
                inline_keyboard: [[{ text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', url: item.link }]],
              },
            };
          }
        }),
      );

      await ctx.answerInlineQuery(results, { cache_time: 0 });
    }
  }

  @On('message')
  async onMessage(@Ctx() ctx: any) {
    if (!ctx.message?.text) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (
      ctx.message.reply_to_message &&
      ctx.message.chat.id.toString() === process.env.TELEGRAM_SUPPORT_PEER_ID
    ) {
      const match = ctx.message.reply_to_message.text.match(/ID: (\d+)/);
      if (match) {
        const userId = match[1];
        await this.telegramService.sendSupportReply(
          parseInt(userId),
          ctx.message.text,
          ctx.message.reply_to_message.message_id,
          ctx.message.reply_to_message.text,
        );
        return;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    const portfolioMatch = ctx.message.text.match(/^\/abros-portfolio-(.+)$/);
    if (portfolioMatch) {
      const itemId = portfolioMatch[1];
      await this.telegramService.sendPortfolioItem(ctx, itemId);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (await this.telegramService.handleOrderMessage(ctx)) return;
    if (await this.telegramService.handleSupportMessage(ctx)) return;
  }

  @Action('reply_support')
  async onReplySupport(@Ctx() ctx: any) {
    const userId = ctx.callbackQuery.from.id;
    const originalMessage = ctx.callbackQuery.message.text;

    this.telegramService.setUserState(userId, 'support', {
      username: ctx.callbackQuery.from.username,
      firstName: ctx.callbackQuery.from.first_name,
      lastName: ctx.callbackQuery.from.last_name,
      originalMessage: originalMessage,
    });

    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'exit_reply_support' }],
        ],
      },
    });
  }

  @Action('exit_reply_support')
  async onExitReplySupport(@Ctx() ctx: any) {
    const userId = ctx.callbackQuery.from.id;
    const userState = await this.telegramService.getUserState(userId);

    if (userState?.data?.originalMessage) {
      await ctx.editMessageText(userState.data.originalMessage, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: 'reply_support' },
              { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', callback_data: 'close_ticket_user' },
            ],
          ],
        },
      });
    }

    this.telegramService.clearUserState(userId);
  }

  @Action('close_ticket_user')
  async onCloseTicketUser(@Ctx() ctx: any) {
    const messageText = ctx.callbackQuery.message.text;
    await ctx.editMessageText(`${messageText}\n\n–°—Ç–∞—Ç—É—Å: üîí –ó–∞–∫—Ä—ã—Ç`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
        ],
      },
    });
  }

  @Action(/^close_ticket:(\d+)$/)
  async onCloseTicketSupport(@Ctx() ctx: any) {
    if (!ctx.callbackQuery?.data) return;

    const userId = ctx.callbackQuery.data.split(':')[1];
    const messageId = ctx.callbackQuery.message.message_id;
    const messageText = ctx.callbackQuery.message.text;

    await this.telegramService.handleTicketClose(
      messageId,
      parseInt(userId),
      messageText,
    );
  }
}

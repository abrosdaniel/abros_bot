import { Injectable } from '@nestjs/common';
import { Markup, Telegraf } from 'telegraf';
import { NocoDBService } from '../../../database/nocodb.service';
import { ExchangeDBService } from '../../../database/services/exchange/exchange.service';
import { MyContext } from '../../types/context.types';

@Injectable()
export class ExchangeService {
  private bot: Telegraf;

  constructor(
    private readonly nocodbService: NocoDBService,
    private readonly exchangeDBService: ExchangeDBService,
  ) {}

  setBotInstance(bot: Telegraf) {
    this.bot = bot;
  }

  async isExchangeUser(telegramId: string): Promise<boolean> {
    const user = await this.nocodbService.findUser(telegramId);
    return user?.services?.includes('Exchange') || false;
  }

  getExchangeKeyboard() {
    return Markup.inlineKeyboard([
      [Markup.button.callback('üí± –ö—É—Ä—Å—ã', 'exchange_rates')],
      [
        Markup.button.callback(
          'üí¨ –ö–∞–Ω–∞–ª—ã/–ß–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π',
          'exchange_resources',
        ),
      ],
      [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_services')],
    ]);
  }

  async getCurrenciesKeyboard() {
    const currencies = await this.exchangeDBService.getCurrencies();
    const buttons = currencies.map((currency) => [
      Markup.button.callback(`${currency.Flag}${currency.Code}`, 'none'),
      Markup.button.callback(`${currency.Buy} ${currency.Symbol}`, 'none'),
      Markup.button.callback(`${currency.Sell} ${currency.Symbol}`, 'none'),
      Markup.button.callback(`‚úèÔ∏è`, `exchange_currency_${currency.Code}`),
    ]);
    buttons.push([
      Markup.button.callback('üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'exchange_publish_rates'),
      Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'exchange'),
    ]);
    return Markup.inlineKeyboard([
      [
        Markup.button.callback('–í–∞–ª—é—Ç–∞', 'none'),
        Markup.button.callback('–ü–æ–∫—É–ø–∫–∞', 'none'),
        Markup.button.callback('–ü—Ä–æ–¥–∞–∂–∞', 'none'),
        Markup.button.callback('‚öôÔ∏è', 'none'),
      ],
      ...buttons,
    ]);
  }

  async getCurrencyKeyboard(code: string) {
    const currency = await this.exchangeDBService.getCurrency(code);
    if (!currency) {
      return null;
    }

    const message =
      `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç—ã ${currency.Flag}${currency.Code}\n\n` +
      `–ü–æ–∫—É–ø–∫–∞\n` +
      `üí± –û–±–º–µ–Ω–Ω–∏–∫: ${currency.Buy}\n` +
      `üè¶ –ë–∞–Ω–∫: ${currency.BuyParse}\n` +
      `üí∞ –í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç: ${currency.BuyProcent}\n\n` +
      `–ü—Ä–æ–¥–∞–∂–∞\n` +
      `üí± –û–±–º–µ–Ω–Ω–∏–∫: ${currency.Sell}\n` +
      `üè¶ –ë–∞–Ω–∫: ${currency.SellParse}\n` +
      `üí∞ –í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç: ${currency.SellProcent}`;

    return {
      text: message,
      keyboard: Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '–ò–∑–º–µ–Ω–∏—Ç—å % –ü–æ–∫—É–ø–∫–∏',
            `exchange_currency_buy_percent_${currency.Code}`,
          ),
          Markup.button.callback(
            '–ò–∑–º–µ–Ω–∏—Ç—å % –ü—Ä–æ–¥–∞–∂–∏',
            `exchange_currency_sell_percent_${currency.Code}`,
          ),
        ],
        [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'exchange_rates')],
      ]),
    };
  }

  async handleCurrencyAction(ctx: MyContext, action: string) {
    let code: string;
    let type: 'buy' | 'sell' | null = null;

    if (action.startsWith('exchange_currency_buy_percent_')) {
      code = action.replace('exchange_currency_buy_percent_', '');
      type = 'buy';
    } else if (action.startsWith('exchange_currency_sell_percent_')) {
      code = action.replace('exchange_currency_sell_percent_', '');
      type = 'sell';
    } else {
      code = action.replace('exchange_currency_', '');
    }

    const currency = await this.exchangeDBService.getCurrency(code);
    if (!currency) {
      await ctx.answerCbQuery('–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    if (ctx.session.waitingForPercent && ctx.message && 'text' in ctx.message) {
      const input = ctx.message.text.trim();
      const isPercentage = input.endsWith('%');
      const value = parseFloat(isPercentage ? input.slice(0, -1) : input);

      if (isNaN(value) || value < 0) {
        await ctx.reply(
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5%)\n\n' +
            '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"',
          Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'exchange_rates')],
          ]),
        );
        return;
      }

      const updatedCurrency = await this.exchangeDBService.updateCurrencyValue(
        code,
        value,
        isPercentage,
        type,
      );

      if (!updatedCurrency) {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"',
          Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'exchange_rates')],
          ]),
        );
        return;
      }

      await ctx.reply(
        `‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ ${type === 'buy' ? '–ø–æ–∫—É–ø–∫–∏' : '–ø—Ä–æ–¥–∞–∂–∏'} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ ${input}\n` +
          `–ù–æ–≤—ã–µ —Ü–µ–Ω—ã:\n` +
          `–ü–æ–∫—É–ø–∫–∞: ${updatedCurrency.Buy} ${updatedCurrency.Symbol}\n` +
          `–ü—Ä–æ–¥–∞–∂–∞: ${updatedCurrency.Sell} ${updatedCurrency.Symbol}`,
        await this.getCurrenciesKeyboard(),
      );
      ctx.session.waitingForPercent = undefined;
    } else if (type) {
      ctx.session.waitingForPercent = { code, type };
      await ctx.editMessageText(
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${type === 'buy' ? '–ø–æ–∫—É–ø–∫–∏' : '–ø—Ä–æ–¥–∞–∂–∏'} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5%):\n\n` +
          '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'exchange_rates')],
        ]),
      );
    } else {
      const settings = await this.getCurrencyKeyboard(code);
      if (!settings) {
        await ctx.answerCbQuery('–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      await ctx.editMessageText(settings.text, settings.keyboard);
    }
  }

  async getResourcesKeyboard(page: number = 1) {
    const { list: resources, total } =
      await this.exchangeDBService.getResources(page);
    const buttons = resources.map((resource) => [
      Markup.button.callback(
        `${resource.type === 'channel' ? 'üì¢' : 'üí¨'} | ${resource.name}`,
        `exchange_resource_view_${resource.Id}`,
      ),
    ]);

    const totalPages = Math.ceil(total / 10);
    const paginationButtons = [];

    if (totalPages > 1) {
      if (page > 1) {
        paginationButtons.push(
          Markup.button.callback('‚óÄÔ∏è', `exchange_resources_page_${page - 1}`),
        );
      }
      if (page < totalPages) {
        paginationButtons.push(
          Markup.button.callback('‚ñ∂Ô∏è', `exchange_resources_page_${page + 1}`),
        );
      }
    }

    buttons.push([
      Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç', 'exchange_add_resource'),
    ]);
    if (paginationButtons.length > 0) {
      buttons.push(paginationButtons);
    }
    buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'exchange')]);

    return Markup.inlineKeyboard(buttons);
  }

  async getResourceKeyboard(id: string) {
    const resource = await this.exchangeDBService.getResource(id);
    if (!resource) {
      return null;
    }

    const message =
      `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ${resource.type === 'channel' ? '–∫–∞–Ω–∞–ª–∞' : '—á–∞—Ç–∞'}:` +
      `\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${resource.name}\n` +
      `–°—Å—ã–ª–∫–∞: ${resource.link}\n` +
      `–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: ${resource.auto_publish === 1 ? '–í–∫–ª—é—á–µ–Ω–∞' : '–í—ã–∫–ª—é—á–µ–Ω–∞'}`;

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          'üìù –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è',
          `exchange_resource_template_${id}`,
        ),
      ],
      [
        Markup.button.callback(
          resource.auto_publish === 1
            ? 'üîï –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é'
            : 'üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é',
          `exchange_resource_${resource.auto_publish === 1 ? 'disable-auto' : 'enable-auto'}_${id}`,
        ),
      ],
      [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `exchange_resource_delete_${id}`)],
      [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'exchange_resources')],
    ]);

    return { text: message, keyboard };
  }

  async handleResourceAction(ctx: MyContext, action: string) {
    if (action === 'exchange_publish_rates') {
      await this.publishRates(ctx);
      return;
    }

    if (action === 'exchange_resources') {
      ctx.session.currentResourcesPage = 1;
      const keyboard = await this.getResourcesKeyboard();
      await ctx.editMessageText('–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:', keyboard);
      return;
    }

    if (action.startsWith('exchange_resources_page_')) {
      const page = parseInt(action.split('_')[3]);
      ctx.session.currentResourcesPage = page;
      const keyboard = await this.getResourcesKeyboard(page);
      await ctx.editMessageText('–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:', keyboard);
      return;
    }

    if (action === 'exchange_add_resource') {
      ctx.session.waitingForResource = true;
      await ctx.editMessageText(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç:',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'exchange_resources')],
        ]),
      );
      return;
    }

    if (action.startsWith('exchange_resource_')) {
      const parts = action.split('_');
      const id = parts[3];
      const actionType = parts[2];

      if (actionType === 'view') {
        const settings = await this.getResourceKeyboard(id);
        if (settings) {
          await ctx.editMessageText(settings.text, settings.keyboard);
        } else {
          await ctx.answerCbQuery('‚ö†Ô∏è –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        return;
      }

      if (actionType === 'delete') {
        const success = await this.exchangeDBService.deleteResource(id);
        if (success) {
          const currentPage = ctx.session.currentResourcesPage || 1;
          await ctx.editMessageText(
            '–ö–∞–Ω–∞–ª/—á–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
            await this.getResourcesKeyboard(currentPage),
          );
        } else {
          await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞');
        }
        return;
      }

      if (actionType === 'enable-auto' || actionType === 'disable-auto') {
        const resource = await this.exchangeDBService.updateResource(id, {
          auto_publish: actionType === 'enable-auto' ? 1 : 0,
        });
        if (resource) {
          const settings = await this.getResourceKeyboard(id);
          if (settings) {
            await ctx.editMessageText(settings.text, settings.keyboard);
          }
        } else {
          await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        }
        return;
      }

      if (actionType === 'template') {
        const resource = await this.exchangeDBService.getResource(id);
        if (!resource) {
          await ctx.answerCbQuery('‚ö†Ô∏è –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }

        const currentTemplate = resource.template;

        const variablesInfo = `{EUR.flag} - —Ñ–ª–∞–≥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: üá™üá∫)
{EUR.currency} - –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: EUR)
{EUR.buy} - –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏
{EUR.sell} - –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏
{EUR.symbol} - —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Ç¨)`;

        const exampleUsage = `{EUR.flag}{EUR.currency}
–ü–æ–∫—É–ø–∫–∞: {EUR.buy} {EUR.symbol}
–ü—Ä–æ–¥–∞–∂–∞: {EUR.sell} {EUR.symbol}

{USD.flag}{USD.currency}
–ü–æ–∫—É–ø–∫–∞: {USD.buy} {USD.symbol}
–ü—Ä–æ–¥–∞–∂–∞: {USD.sell} {USD.symbol}`;

        await ctx.editMessageText(
          `üìù –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${resource.name}\n\n` +
            `–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω:\n\n\`\`\`\n${currentTemplate}\n\`\`\`\n\n` +
            `üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ:\n\n\`\`\`\n${variablesInfo}\n\`\`\`\n\n` +
            `–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n\`\`\`\n${exampleUsage}\n\`\`\`\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥"`,
          {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                  `exchange_resource_view_${id}`,
                ),
              ],
            ]),
          },
        );

        ctx.session.waitingForTemplate = { resourceId: id };
        return;
      }
    }
  }

  async handleTextMessage(ctx: MyContext) {
    if (
      ctx.session.waitingForResource &&
      ctx.message &&
      'text' in ctx.message
    ) {
      let link = ctx.message.text.trim();
      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫
        if (link.startsWith('https://t.me/')) {
          link = '@' + link.replace('https://t.me/', '');
        } else if (link.startsWith('http://t.me/')) {
          link = '@' + link.replace('http://t.me/', '');
        } else if (link.startsWith('t.me/')) {
          link = '@' + link.replace('t.me/', '');
        } else if (!link.startsWith('@')) {
          link = '@' + link;
        }

        const chat = await ctx.telegram.getChat(link);
        if (!chat) {
          await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ');
          return;
        }

        try {
          // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ - —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
          await ctx.telegram.getChatMember(chat.id, ctx.botInfo.id);
        } catch (error) {
          await ctx.reply('‚ö†Ô∏è –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞');
          return;
        }

        const chatTitle = 'title' in chat ? chat.title : 'Unknown';
        const chatType = chat.type === 'channel' ? 'channel' : 'chat';

        const resource = await this.exchangeDBService.createResource({
          type: chatType,
          name: chatTitle,
          link: link,
          telegram_id: chat.id.toString(),
        });

        if (!resource) {
          await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞');
          return;
        }

        const keyboard = await this.getResourcesKeyboard();
        await ctx.reply(`–ö–∞–Ω–∞–ª/—á–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n${chatTitle}`, keyboard);
      } catch (error) {
        console.error('Error adding resource:', error);
        await ctx.reply(
          '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç.',
        );
      }
      ctx.session.waitingForResource = undefined;
      return;
    }

    if (
      ctx.session.waitingForTemplate &&
      ctx.message &&
      'text' in ctx.message
    ) {
      const { resourceId } = ctx.session.waitingForTemplate;
      const template = ctx.message.text.trim();

      const resource = await this.exchangeDBService.updateResource(resourceId, {
        template: template,
      });

      if (resource) {
        await ctx.reply('‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        const settings = await this.getResourceKeyboard(resourceId);
        if (settings) {
          await ctx.reply(settings.text, settings.keyboard);
        }
      } else {
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞');
      }

      ctx.session.waitingForTemplate = undefined;
      return;
    }
  }

  async publishRates(ctx?: MyContext) {
    if (!this.bot) {
      throw new Error('Bot instance not set');
    }

    const currencies = await this.exchangeDBService.getCurrencies();
    const resources = await this.exchangeDBService.getResources(1, 100);

    let successCount = 0;
    let errorCount = 0;

    for (const resource of resources.list) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
      if (resource.auto_publish === 0) continue;

      try {
        const template = resource.template;
        let message = template;

        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
        currencies.forEach((currency) => {
          const code = currency.Code;
          message = message
            .replace(new RegExp(`{${code}\.flag}`, 'g'), currency.Flag)
            .replace(new RegExp(`{${code}\.currency}`, 'g'), currency.Code)
            .replace(new RegExp(`{${code}\.buy}`, 'g'), currency.Buy)
            .replace(new RegExp(`{${code}\.sell}`, 'g'), currency.Sell)
            .replace(new RegExp(`{${code}\.symbol}`, 'g'), currency.Symbol);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const admins = await this.bot.telegram.getChatAdministrators(
          resource.telegram_id,
        );
        const isAdmin = admins.some(
          (admin) => admin.user.id === this.bot.botInfo.id,
        );

        const messageOptions = {
          parse_mode: 'HTML' as const,
          link_preview_options: { is_disabled: true },
          disable_notification: true,
        };

        if (isAdmin) {
          // –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
          await this.bot.telegram.sendMessage(
            resource.telegram_id,
            message,
            messageOptions,
          );
        } else {
          // –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
          await this.bot.telegram.sendMessage(
            resource.telegram_id,
            message,
            messageOptions,
          );
        }

        successCount++;
      } catch (error) {
        console.error(`Error publishing rates to ${resource.name}:`, error);
        errorCount++;
      }
    }

    if (ctx) {
      await ctx.reply(
        `–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${errorCount}`,
        await this.getCurrenciesKeyboard(),
      );
    }

    return {
      successCount,
      errorCount,
    };
  }
}

import { Injectable } from '@nestjs/common';
import { Markup } from 'telegraf';
import { NocoDBService } from '../../database/nocodb.service';
import { parsePhoneNumberFromString } from 'libphonenumber-js';

@Injectable()
export class UserService {
  constructor(private readonly nocodbService: NocoDBService) {}

  private formatDate(dateString: string): string {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });
  }

  private formatRoles(roles: string | string[] | null | undefined): string {
    if (!roles) return '–ù–µ—Ç —Ä–æ–ª–µ–π';

    if (typeof roles === 'string') {
      return roles || '–ù–µ—Ç —Ä–æ–ª–µ–π';
    }

    if (Array.isArray(roles)) {
      return roles.length > 0 ? roles.join('\n') : '–ù–µ—Ç —Ä–æ–ª–µ–π';
    }

    return '–ù–µ—Ç —Ä–æ–ª–µ–π';
  }

  private formatSubscriptions(
    subscriptions: string | string[] | null | undefined,
  ): string {
    if (!subscriptions) return '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫';

    if (typeof subscriptions === 'string') {
      return subscriptions || '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫';
    }

    if (Array.isArray(subscriptions)) {
      return subscriptions.length > 0
        ? subscriptions.join('\n')
        : '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫';
    }

    return '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫';
  }

  private formatServices(
    services: string | string[] | null | undefined,
  ): string {
    if (!services) return '–ù–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤';

    if (typeof services === 'string') {
      return services || '–ù–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤';
    }

    if (Array.isArray(services)) {
      return services.length > 0 ? services.join('\n') : '–ù–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤';
    }

    return '–ù–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤';
  }

  async getAccountInfo(telegramId: string) {
    const user = await this.nocodbService.findUser(telegramId);
    if (!user) return null;

    return `üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üÜî
‚îú –°–∏—Å—Ç–µ–º–Ω—ã–π: ${user.user_id}
‚îî Telegram: ${user.telegram_id}

üë§ 
‚îú –ò–º—è: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚îú –§–∞–º–∏–ª–∏—è: ${user.last_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚îú Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚îî –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìÖ
‚îî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ${this.formatDate(user.CreatedAt)}

üîë –†–æ–ª–∏:
${this.formatRoles(user.roles)}

üóÇÔ∏è –ü–æ–¥–ø–∏—Å–∫–∏:
${this.formatSubscriptions(user.subscriptions)}

üõ†Ô∏è –°–µ—Ä–≤–∏—Å—ã:
${this.formatServices(user.services)}`;
  }

  async getAccountKeyboard(telegramId: string) {
    const buttons = [
      [
        Markup.button.callback('üóÇÔ∏è –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', 'my_subscriptions'),
        Markup.button.callback('üõ†Ô∏è –ú–æ–∏ —Å–µ—Ä–≤–∏—Å—ã', 'my_services'),
      ],
      [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'edit_account')],
    ];

    buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_main')]);

    return Markup.inlineKeyboard(buttons);
  }

  async getServicesKeyboard(telegramId: string) {
    const user = await this.nocodbService.findUser(telegramId);
    const buttons = [];

    if (user?.services?.includes('Exchange')) {
      buttons.push([Markup.button.callback(`üí± –û–±–º–µ–Ω–Ω–∏–∫`, 'exchange')]);
    }

    buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')]);

    return Markup.inlineKeyboard(buttons);
  }

  async getSubscriptionsKeyboard(telegramId: string) {
    const user = await this.nocodbService.findUser(telegramId);
    const buttons = [];

    if (user?.subscriptions && user.subscriptions.length > 0) {
      user.subscriptions.forEach((subscription) => {
        buttons.push([Markup.button.callback(`üì¢ ${subscription}`, 'none')]);
      });
    }

    buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')]);

    return Markup.inlineKeyboard(buttons);
  }

  getEditKeyboard() {
    return Markup.inlineKeyboard([
      [Markup.button.callback('üìÆ Email', 'edit_email')],
      [Markup.button.callback('üìû –¢–µ–ª–µ—Ñ–æ–Ω', 'edit_phone')],
      [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')],
    ]);
  }

  async updateUserData(
    telegramId: string,
    field: 'email' | 'phone',
    value: string,
  ): Promise<{ success: boolean; message: string }> {
    try {
      if (field === 'email' && !this.isValidEmail(value)) {
        return {
          success: false,
          message:
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.',
        };
      }

      if (field === 'phone' && !this.isValidPhone(value)) {
        return {
          success: false,
          message:
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79001234567)',
        };
      }

      await this.nocodbService.updateUser(telegramId, { [field]: value });

      return {
        success: true,
        message: `${field === 'email' ? 'Email' : '–¢–µ–ª–µ—Ñ–æ–Ω'} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`,
      };
    } catch (error) {
      console.error('Error updating user data:', error);
      return {
        success: false,
        message:
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      };
    }
  }

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  private isValidPhone(phone: string): boolean {
    try {
      const phoneNumber = parsePhoneNumberFromString(phone);
      return phoneNumber?.isValid() || false;
    } catch (error) {
      return false;
    }
  }

  async isDeveloperUser(telegramId: string): Promise<boolean> {
    const user = await this.nocodbService.findUser(telegramId);
    return user?.roles?.includes('Developer') || false;
  }
}
